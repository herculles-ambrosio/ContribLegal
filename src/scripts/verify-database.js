// Script para verificar o estado do banco de dados e confirmar que as pol√≠ticas RLS est√£o corretas
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function verifyDatabase() {
  try {
    console.log('üîç Iniciando verifica√ß√£o do banco de dados e pol√≠ticas RLS...');
    console.log('======================================================================');
    
    // Configura√ß√£o do cliente Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    const supabaseServiceKey = process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Configura√ß√£o incompleta! Verifique as vari√°veis de ambiente.');
      return;
    }
    
    // Cliente normal para testar como usu√°rio comum
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Cliente com role de servi√ßo para contornar RLS e verificar configura√ß√µes
    const supabaseAdmin = supabaseServiceKey 
      ? createClient(supabaseUrl, supabaseServiceKey)
      : null;
    
    if (!supabaseAdmin) {
      console.warn('‚ö†Ô∏è SERVICE_ROLE_KEY n√£o dispon√≠vel. A verifica√ß√£o ser√° limitada.');
    }
    
    // Verificar formato das tabelas principais
    console.log('üìã Verificando estrutura da tabela usuarios...');
    const { data: usuariosInfo, error: usuariosInfoError } = await supabaseAdmin?.rpc('executar_query_admin', {
      query_sql: `
        SELECT column_name, data_type, character_maximum_length, column_default, is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'usuarios'
        ORDER BY ordinal_position
      `
    }) || { data: null, error: { message: 'SERVICE_ROLE_KEY n√£o dispon√≠vel' } };
    
    if (usuariosInfoError) {
      console.error('‚ùå Erro ao verificar estrutura da tabela usuarios:', usuariosInfoError.message);
    } else if (usuariosInfo) {
      console.log('‚úÖ Estrutura da tabela usuarios:');
      console.table(usuariosInfo);
      
      // Verificar se existe coluna master
      const masterColuna = usuariosInfo.find(col => col.column_name === 'master');
      if (masterColuna) {
        console.log('‚úÖ Coluna "master" existe na tabela usuarios.');
      } else {
        console.error('‚ùå Coluna "master" N√ÉO existe na tabela usuarios!');
      }
    }
    
    // Verificar pol√≠ticas RLS nas tabelas principais
    console.log('\nüìã Verificando pol√≠ticas RLS...');
    const { data: rlsPolicies, error: rlsPoliciesError } = await supabaseAdmin?.rpc('executar_query_admin', {
      query_sql: `
        SELECT 
          schemaname, 
          tablename, 
          policyname, 
          permissive,
          roles,
          cmd,
          qual,
          with_check
        FROM 
          pg_policies
        WHERE 
          schemaname = 'public' AND 
          (tablename = 'usuarios' OR tablename = 'documentos')
        ORDER BY
          tablename, cmd
      `
    }) || { data: null, error: { message: 'SERVICE_ROLE_KEY n√£o dispon√≠vel' } };
    
    if (rlsPoliciesError) {
      console.error('‚ùå Erro ao verificar pol√≠ticas RLS:', rlsPoliciesError.message);
    } else if (rlsPolicies) {
      console.log('‚úÖ Pol√≠ticas RLS configuradas:');
      console.table(rlsPolicies);
      
      // Verificar se existem pol√≠ticas para todas as opera√ß√µes necess√°rias
      const usuariosOperations = new Set(rlsPolicies
        .filter(p => p.tablename === 'usuarios')
        .map(p => p.cmd));
        
      const documentosOperations = new Set(rlsPolicies
        .filter(p => p.tablename === 'documentos')
        .map(p => p.cmd));
      
      console.log('\nüìä Resumo de opera√ß√µes cobertas por pol√≠ticas RLS:');
      console.log('üìã Tabela usuarios:');
      console.log('  - SELECT:', usuariosOperations.has('SELECT') ? '‚úÖ' : '‚ùå');
      console.log('  - INSERT:', usuariosOperations.has('INSERT') ? '‚úÖ' : '‚ùå');
      console.log('  - UPDATE:', usuariosOperations.has('UPDATE') ? '‚úÖ' : '‚ùå');
      console.log('  - DELETE:', usuariosOperations.has('DELETE') ? '‚úÖ' : '‚ùå');
      
      console.log('üìã Tabela documentos:');
      console.log('  - SELECT:', documentosOperations.has('SELECT') ? '‚úÖ' : '‚ùå');
      console.log('  - INSERT:', documentosOperations.has('INSERT') ? '‚úÖ' : '‚ùå');
      console.log('  - UPDATE:', documentosOperations.has('UPDATE') ? '‚úÖ' : '‚ùå');
      console.log('  - DELETE:', documentosOperations.has('DELETE') ? '‚úÖ' : '‚ùå');
    }
    
    // Verificar status de RLS nas tabelas
    console.log('\nüìã Verificando status de RLS...');
    const { data: rlsStatus, error: rlsStatusError } = await supabaseAdmin?.rpc('executar_query_admin', {
      query_sql: `
        SELECT 
          table_schema,
          table_name,
          row_level_security
        FROM 
          information_schema.tables 
        WHERE 
          table_schema = 'public' AND
          (table_name = 'usuarios' OR table_name = 'documentos')
      `
    }) || { data: null, error: { message: 'SERVICE_ROLE_KEY n√£o dispon√≠vel' } };
    
    if (rlsStatusError) {
      console.error('‚ùå Erro ao verificar status de RLS:', rlsStatusError.message);
    } else if (rlsStatus) {
      console.log('‚úÖ Status de RLS nas tabelas:');
      console.table(rlsStatus);
    }
    
    // Verificar fun√ß√µes admin
    console.log('\nüìã Verificando fun√ß√µes administrativas...');
    const { data: adminFunctions, error: adminFunctionsError } = await supabaseAdmin?.rpc('executar_query_admin', {
      query_sql: `
        SELECT 
          routine_name,
          data_type AS return_type,
          security_type
        FROM 
          information_schema.routines
        WHERE 
          routine_schema = 'public' AND
          routine_name LIKE 'admin%'
      `
    }) || { data: null, error: { message: 'SERVICE_ROLE_KEY n√£o dispon√≠vel' } };
    
    if (adminFunctionsError) {
      console.error('‚ùå Erro ao verificar fun√ß√µes administrativas:', adminFunctionsError.message);
    } else if (adminFunctions) {
      console.log('‚úÖ Fun√ß√µes administrativas:');
      console.table(adminFunctions);
      
      // Verificar se as fun√ß√µes usam SECURITY DEFINER
      const securityDefinerCount = adminFunctions.filter(f => f.security_type === 'DEFINER').length;
      if (securityDefinerCount === adminFunctions.length) {
        console.log('‚úÖ Todas as fun√ß√µes admin usam SECURITY DEFINER corretamente.');
      } else {
        console.warn(`‚ö†Ô∏è Apenas ${securityDefinerCount} de ${adminFunctions.length} fun√ß√µes admin usam SECURITY DEFINER!`);
      }
    }
    
    // Verificar usu√°rio admin
    console.log('\nüìã Verificando usu√°rio administrador...');
    const { data: adminUsers, error: adminUsersError } = await supabaseAdmin?.rpc('executar_query_admin', {
      query_sql: `
        SELECT id, email, nome_completo, master, created_at
        FROM usuarios
        WHERE master = 'S'
      `
    }) || { data: null, error: { message: 'SERVICE_ROLE_KEY n√£o dispon√≠vel' } };
    
    if (adminUsersError) {
      console.error('‚ùå Erro ao verificar usu√°rios administradores:', adminUsersError.message);
    } else if (adminUsers) {
      if (adminUsers.length === 0) {
        console.error('‚ùå NENHUM usu√°rio administrador encontrado!');
      } else {
        console.log(`‚úÖ ${adminUsers.length} usu√°rio(s) administrador(es) encontrado(s):`);
        console.table(adminUsers);
      }
    }
    
    console.log('\n‚ú® Verifica√ß√£o do banco de dados conclu√≠da!');
    console.log('======================================================================');
    
    // Sugest√µes baseadas em an√°lise
    console.log('\nüìù RECOMENDA√á√ïES:');
    if (!supabaseAdmin) {
      console.log('‚ñ∂ Configure a vari√°vel NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY no arquivo .env.local para diagn√≥sticos completos.');
    }
    
    if (!adminUsers || adminUsers.length === 0) {
      console.log('‚ñ∂ Execute o script fix-rls-complete.sql para criar/configurar o usu√°rio administrador.');
    }
    
    if (usuariosInfo && !usuariosInfo.find(col => col.column_name === 'master')) {
      console.log('‚ñ∂ A coluna "master" est√° ausente na tabela "usuarios" - execute o script fix-rls-complete.sql.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado durante a verifica√ß√£o:', error);
  }
}

verifyDatabase(); 